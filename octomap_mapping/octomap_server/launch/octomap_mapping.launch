<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<arg name="point_cloud" default="/merged_pc" />
	<arg name="node_name" default="camera_scan_map" />

	<node pkg="octomap_server" type="octomap_server_node" name="$(arg node_name)">
		<param name="resolution" value="0.02" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="odom" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="10.0" />

		<!-- ground_filter z -->
		<param name="filter_ground" value="false" />
<!--		<param name="ground_filter/plane_distance" value="1.0" />-->
		<param name="pointcloud_min_z" value="0.25" />
<!--		<param name="occupancy_min_z" value="0.4" />-->
<!--		<param name="ground_filter/angle" value="0.5" />-->

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="$(arg point_cloud)" />
<!--		<remap from="cloud_in" to="/scan_pc" />-->

	</node>
</launch>